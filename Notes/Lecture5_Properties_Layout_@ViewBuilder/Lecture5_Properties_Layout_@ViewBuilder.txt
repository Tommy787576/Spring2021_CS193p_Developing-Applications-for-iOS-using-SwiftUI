@State -> internal working of the View
@State var is private (can only used inside your own view)

Property Observers vs. Computed properties: totally different
willSet {
    will be execute just before isFaceUp is changed
}
didSet {
    will be execute right after isFaceUp is changed
}

Layout: How is the space on-screen apportioned to the Views?
HStack and VStack -> divide up the space that is offered to them and then offer that to the Views inside.
It offers space to its **"least flexible (ex: Image)"** subviews first

Spacer -> take as much space as it can (really flexible)
Divider -> Draws a dividing line cross-wise to the way the stack is laying out

layoutPriority: The most value one will get the space it wants first

"lazy": they don't build any of their Views that are not visible / they aren't flexible
You'd use these when you have a stack that is in a ScrollView

ZStack:
size itself to fit its all children

GeometryReader: You wrap this View around what would normally appear in you View's body
use all space offers to it

ZStack {...}.edgesIgnoringSafeArea([.top])  // draw in "safe area" on top edge

ViewBuilder:
Any func or read-only computed var can be marked with @viewBuilder